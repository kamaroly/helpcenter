name: Elixir CI

on:
  push:
    branches: [ "main", "staging", "dev" ]
  pull_request:
    branches: [ "main", "staging", "dev" ]

env:
  MIX_ENV: test

permissions:
  contents: read

jobs:
  test_and_deploy:
    runs-on: ubuntu-latest
    name: Test and Deploy on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    strategy:
      matrix:
        otp: ['27']
        elixir: ['1.18.1']
    services:
      db:
        image: postgres
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: ikijumba
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{matrix.otp}}
        elixir-version: ${{matrix.elixir }}

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-elixir-deps
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-

    - name: Cache compiled build
      id: cache-build
      uses: actions/cache@v3
      env:
        cache-name: cache-compiled-build
      with:
        path: _build
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-
          ${{ runner.os }}-mix-

    - name: Install dependencies
      run: mix deps.get

    - name: Compiles without warnings
      run: mix compile

    - name: Check Formatting
      run: mix format --check-formatted

    - name: Run tests
      run: mix test --color

    - name: Fetch production dependencies
      run: mix deps.get --only prod

    - name: Compile the application for production
      run: MIX_ENV=prod mix compile

    - name: Deploy assets
      run: |
        MIX_ENV=prod mix assets.deploy

    - name: Generate the Phoenix release
      run: mix phx.gen.release

    - name: Build the release
      run: |
        yes | MIX_ENV=prod mix release --overwrite

    - name: Zipping release
      run: tar -czf helpcenter.tar.gz -C _build/prod/rel/helpcenter .

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.PRODUCTION_SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy release to production server
      run: |
        scp helpcenter.tar.gz ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_SERVER_HOST }}:~/
        scp ./shell/deploy-helpcenter.sh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_SERVER_HOST }}:~/
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_SERVER_HOST }} "~/deploy-helpcenter.sh"
 
    - name: Cleanup
      run: rm -f helpcenter.tar.gz
